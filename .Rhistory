mutate(name=region) -> covid
if(!missing(Date)){
date_filt <- covid %>% filter(date==Date)
}else{
date_filt <- covid
}
out.states <- merge(temp.states, date_filt, by="name", all.x=TRUE)
out.states <- data.table(out.states)
setkey(out.states, rn)
state_shapes@data <- out.states[row.names(state_shapes)]
if(missing(value)){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="tot_cases"){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="new_cases"){
Value <- state_shapes$new_case
Label <<- "New Cases:"}
else if(value=="tot_death"){
Value <- state_shapes$tot_death
Label <<- "Total Deaths:"}
else if(value=="new_death"){
Value <- state_shapes$new_death
Label <<- "New Deaths:"}
pal <- colorBin(pal,domain=NULL, n=5)
leaflet(data= state_shapes) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor= ~pal(Value),
fillOpacity= 0.8,
color="black",
weight= 1,
popup=~paste(str_to_title(name),
"<br>", Date, "<br>", Label,
Value))
# addLegend("bottomleft",
#           #colors=brewer.pal(5, "YlOrRd"),
#           labels=c("low","","","","high"),
#           title="Covid-19 Data in the United States <br>", Label)
}
covid_map2()
covid_map2 <- function(value, Date="2020-12-02", pal="YlOrRd", ...){
require(dplyr)
require(ggplot2)
require(rgdal)
require(leaflet)
require(readr)
require(data.table)
require(RColorBrewer)
require(shiny)
require(geojsonio)
require(stringr)
Date <- as.Date(as.character(Date), format = "%Y-%m-%d")
state_shapes <- geojson_read("https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json",
what="sp")
slotNames(state_shapes)
state_shapes@data$rn <- row.names(state_shapes)
temp.states <- data.table(state_shapes@data)
temp.states$name <- tolower(temp.states$name)
covid <- covid_update()
covid %>%
mutate(name=region) -> covid
if(!missing(Date)){
date_filt <- covid %>% filter(date==Date)
}else{
date_filt <- covid
}
out.states <- merge(temp.states, date_filt, by="name", all.x=TRUE)
out.states <- data.table(out.states)
setkey(out.states, rn)
state_shapes@data <- out.states[row.names(state_shapes)]
if(missing(value)){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="tot_cases"){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="new_cases"){
Value <- state_shapes$new_case
Label <<- "New Cases:"}
else if(value=="tot_death"){
Value <- state_shapes$tot_death
Label <<- "Total Deaths:"}
else if(value=="new_death"){
Value <- state_shapes$new_death
Label <<- "New Deaths:"}
pal <- colorBin(pal,domain=NULL, n=5)
leaflet(data= state_shapes) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor= ~pal(Value),
fillOpacity= 0.8,
color="black",
weight= 1,
popup=~paste(str_to_title(name),
"<br>", Date, "<br>", Label,
Value)) %>%
addLegend("bottomleft",
#colors=brewer.pal(5, "YlOrRd"),
labels=c("low","","","","high"),
title="Covid-19 Data in the United States <br>", Label)
}
covid_map2()
covid_map2 <- function(value, Date="2020-12-02", pal="YlOrRd", ...){
require(dplyr)
require(ggplot2)
require(rgdal)
require(leaflet)
require(readr)
require(data.table)
require(RColorBrewer)
require(shiny)
require(geojsonio)
require(stringr)
Date <- as.Date(as.character(Date), format = "%Y-%m-%d")
state_shapes <- geojson_read("https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json",
what="sp")
slotNames(state_shapes)
state_shapes@data$rn <- row.names(state_shapes)
temp.states <- data.table(state_shapes@data)
temp.states$name <- tolower(temp.states$name)
covid <- covid_update()
covid %>%
mutate(name=region) -> covid
if(!missing(Date)){
date_filt <- covid %>% filter(date==Date)
}else{
date_filt <- covid
}
out.states <- merge(temp.states, date_filt, by="name", all.x=TRUE)
out.states <- data.table(out.states)
setkey(out.states, rn)
state_shapes@data <- out.states[row.names(state_shapes)]
if(missing(value)){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="tot_cases"){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="new_cases"){
Value <- state_shapes$new_case
Label <<- "New Cases:"}
else if(value=="tot_death"){
Value <- state_shapes$tot_death
Label <<- "Total Deaths:"}
else if(value=="new_death"){
Value <- state_shapes$new_death
Label <<- "New Deaths:"}
pal <- colorBin(pal,domain=NULL, n=5)
leaflet(data= state_shapes) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor= ~pal(Value),
fillOpacity= 0.8,
color="black",
weight= 1,
popup=~paste(str_to_title(name),
"<br>", Date, "<br>", Label,
Value)) %>%
addLegend("bottomleft",
#colors=brewer.pal(5, "YlOrRd"),
labels=c("low","","","","high"),
title="Covid-19 Data in the United States <br>")
}
covid_map2()
covid_map2 <- function(value, Date="2020-12-02", pal="YlOrRd", ...){
require(dplyr)
require(ggplot2)
require(rgdal)
require(leaflet)
require(readr)
require(data.table)
require(RColorBrewer)
require(shiny)
require(geojsonio)
require(stringr)
Date <- as.Date(as.character(Date), format = "%Y-%m-%d")
state_shapes <- geojson_read("https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json",
what="sp")
slotNames(state_shapes)
state_shapes@data$rn <- row.names(state_shapes)
temp.states <- data.table(state_shapes@data)
temp.states$name <- tolower(temp.states$name)
covid <- covid_update()
covid %>%
mutate(name=region) -> covid
if(!missing(Date)){
date_filt <- covid %>% filter(date==Date)
}else{
date_filt <- covid
}
out.states <- merge(temp.states, date_filt, by="name", all.x=TRUE)
out.states <- data.table(out.states)
setkey(out.states, rn)
state_shapes@data <- out.states[row.names(state_shapes)]
if(missing(value)){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="tot_cases"){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="new_cases"){
Value <- state_shapes$new_case
Label <<- "New Cases:"}
else if(value=="tot_death"){
Value <- state_shapes$tot_death
Label <<- "Total Deaths:"}
else if(value=="new_death"){
Value <- state_shapes$new_death
Label <<- "New Deaths:"}
pal <- colorBin(pal,domain=NULL, n=5)
leaflet(data= state_shapes) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor= ~pal(Value),
fillOpacity= 0.8,
color="black",
weight= 1,
popup=~paste(str_to_title(name),
"<br>", Date, "<br>", Label,
Value)) %>%
addLegend("bottomleft",
colors=brewer.pal(5, "YlOrRd"),
labels=c("low","","","","high"),
title="Covid-19 Data in the United States <br>")
}
covid_map2()
covid_map2 <- function(value, Date="2020-12-02", pal="YlOrRd", ...){
require(dplyr)
require(ggplot2)
require(rgdal)
require(leaflet)
require(readr)
require(data.table)
require(RColorBrewer)
require(shiny)
require(geojsonio)
require(stringr)
Date <- as.Date(as.character(Date), format = "%Y-%m-%d")
state_shapes <- geojson_read("https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json",
what="sp")
slotNames(state_shapes)
state_shapes@data$rn <- row.names(state_shapes)
temp.states <- data.table(state_shapes@data)
temp.states$name <- tolower(temp.states$name)
covid <- covid_update()
covid %>%
mutate(name=region) -> covid
if(!missing(Date)){
date_filt <- covid %>% filter(date==Date)
}else{
date_filt <- covid
}
out.states <- merge(temp.states, date_filt, by="name", all.x=TRUE)
out.states <- data.table(out.states)
setkey(out.states, rn)
state_shapes@data <- out.states[row.names(state_shapes)]
if(missing(value)){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="tot_cases"){
Value <- state_shapes$tot_cases
Label <<- "Total Cases:"}
else if(value=="new_cases"){
Value <- state_shapes$new_case
Label <<- "New Cases:"}
else if(value=="tot_death"){
Value <- state_shapes$tot_death
Label <<- "Total Deaths:"}
else if(value=="new_death"){
Value <- state_shapes$new_death
Label <<- "New Deaths:"}
pal <- colorBin(pal,domain=NULL, n=5)
leaflet(data= state_shapes) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor= ~pal(Value),
fillOpacity= 0.8,
color="black",
weight= 1,
popup=~paste(str_to_title(name),
"<br>", Date, "<br>", Label,
Value)) %>%
addLegend("bottomleft",
colors=brewer.pal(5, "YlOrRd"),
labels=c("low","","","","high"),
title=~paste("Covid-19 Data in the United States <br>", Label))
}
covid_map2()
covid_map2("tot_death","2020-11-01")
library(USevolve)
load("~/USevolve/R/sysdata.rda")
View(county_map)
View(county_pres)
View(county_pres)
counties_shapes <- geojson_read("https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json",what="sp")
county_pres <- USevolve:::county_pres
counties_shapes <- geojson_read("https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json",what="sp")
counties_shapes <- geojson_read("https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json",what="sp")
counties_shapes <- geojson_read("https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json",what="sp")
require(maps)
require(maps)
require(dplyr)
require(maps)
require(dplyr)
require(ggplot2)
require(devtools)
require(rgdal)
require(leaflet)
require(RColorBrewer)
require(geojsonio)
require(maps)
require(dplyr)
require(ggplot2)
require(devtools)
require(rgdal)
require(leaflet)
require(RColorBrewer)
require(geojsonio)
require(readr)
counties_shapes <- geojson_read("https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json",what="sp")
View(counties_shapes)
county_pres <- USevolve:::county_pres
slotNames(counties_shapes)
slotNames(counties_shapes)
counties_shapes@data$rn <- row.names(counties_shapes)
temp.counties <- data.table(counties_shapes@data)
temp.counties$name <- tolower(temp.states$name)
temp.counties$name <- tolower(temp.counties$name)
county_election_years <- c(2000, 2004, 2008, 2012, 2016)
county_pres <- na.omit(county_pres)
county_pres$party[county_pres$party != "democrat" & county_pres$party != "republican"] <- "other"
county_pres$candidate[county_pres$party != "democrat" & county_pres$party != "republican"] <- "other"
partycolor <- c("blue2", "red1", "yellow")
names(partycolor) <- unique(county_pres$party)
View(county_pres)
county_majority <- county_pres %>%
filter(year==Year) %>%
group_by(region) %>%
slice_max(county_percent)
names(partycolor) <- unique(county_pres$party)
county_majority <- county_pres %>%
filter(year==Year) %>%
group_by(region) %>%
slice_max(county_percent)
View(county_pres)
county_majority <- county_pres %>%
filter(year) %>%
group_by(region) %>%
slice_max(county_percent)
county_majority <- county_pres %>%
filter(year) %>%
group_by(region) %>%
slice_max(county_percent)
county_majority <- county_pres %>%
group_by(region) %>%
slice_max(county_percent)
county_majority_alphabet <- county_majority[order(county_majority$candidate), ]
View(county_majority_alphabet)
if(county_majority_alphabet$party[[1]]=="democrat"){
partycolor <- c("blue2", "red1")
else if(county_majority_alphabet$party[[1]]=="republican"){
partycolor <- c("red1", "blue2")
}
if(label=="party"){
names(partycolor) <- unique(county_majority_alphabet$party)
ggplot()+
geom_map(data=county_map, aes(map_id= region), map = county_map) +
geom_map(data=county_majority, aes(map_id= region, fill=party), map = county_map) +
expand_limits(x = county_map$long, y = county_map$lat) +
scale_fill_manual(name = "Party", values = partycolor) +
coord_map("albers", lat0=30, lat1=40) +
ggtitle("County Winner Map", Year) + xlab("Longitude") + ylab("Latitude")
}
else{
names(partycolor) <- unique(county_majority_alphabet$candidate)
ggplot()+
geom_map(data=county_map, aes(map_id= region), map = county_map) +
geom_map(data=county_majority, aes(map_id= region, fill=candidate), map = county_map) +
expand_limits(x = county_map$long, y = county_map$lat) +
scale_fill_manual(name = "Candidate", values = partycolor) +
coord_map("albers", lat0=30, lat1=40) +
ggtitle("County Winner Map", Year) + xlab("Longitude") + ylab("Latitude")
}
}
else if(county_majority_alphabet$party[[1]]=="republican"){
partycolor <- c("red1", "blue2")
}
if(county_majority_alphabet$party[[1]]=="democrat"){
partycolor <- c("blue2", "red1")
else if(county_majority_alphabet$party[[1]]=="republican"){
partycolor <- c("red1", "blue2")
}
}
if(county_majority_alphabet$party[[1]]=="democrat"){
partycolor <- c("blue2", "red1")
else if(county_majority_alphabet$party[[1]]=="republican"){
partycolor <- c("red1", "blue2")
}
}
if(county_majority_alphabet$party[[1]]=="democrat"){
partycolor <- c("blue2", "red1")
else if(county_majority_alphabet$party[[1]]=="republican"){
partycolor <- c("red1", "blue2")
}
}
if(county_majority_alphabet$party[[1]]=="democrat"){
partycolor <- c("blue2", "red1")
else if(county_majority_alphabet$party[[1]]=="republican"){
partycolor <- c("red1", "blue2")
}
}
else if(county_majority_alphabet$party[[1]]=="republican"){
partycolor <- c("red1", "blue2")
}
if(county_majority_alphabet$party[[1]]=="democrat"){
partycolor <- c("blue2", "red1")
else(county_majority_alphabet$party[[1]]=="republican"){
partycolor <- c("red1", "blue2")
}
}
partycolor <- c("blue2", "red1")}
if(county_majority_alphabet$party[[1]]=="democrat"){partycolor <- c("blue2", "red1")}
if(county_majority_alphabet$party[[1]]=="republican"){partycolor <- c("red1", "blue2")}
if(label=="party"){names(partycolor) <- unique(county_majority_alphabet$party)}
View(county_pres)
View(counties_shapes)
county_pres %>%
rename(name=region) -> county_pres
View(county_pres)
out.states <- merge(temp.counties, county_pres , by="name", all.x=TRUE)
out.states <- data.table(out.states)
setkey(out.states, rn)
county_pres %>%
rename(name=region) -> county_pres
out.counties <- merge(temp.counties, county_pres , by="name", all.x=TRUE)
out.counties <- data.table(out.counties)
setkey(out.counties, rn)
counties_shapes@data <- out.counties[row.names(counties_shapes)]
partycolor <- c("blue2", "red1", "yellow")
names(partycolor) <- unique(counties_shapes$party)
county_majority <- counties_shapes %>%
group_by(region) %>%
slice_max(county_percent)
counties_shapes %>%
group_by(region) %>%
slice_max(county_percent)
View(counties_shapes)
counties_shapes@data %>%
group_by(region) %>%
slice_max(county_percent)
counties_shapes@data %>%
group_by(name) %>%
slice_max(county_percent)
county_majority_alphabet <- county_majority[order(county_majority$candidate), ]
if(county_majority_alphabet$party[[1]]=="democrat"){partycolor <- c("blue2", "red1")}
if(county_majority_alphabet$party[[1]]=="republican"){partycolor <- c("red1", "blue2")}
leaflet(data = counties_shapes) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(candidate),
fillOpacity = 0.8,
color = "black",
weight = 1,
popup=~paste(name, "<br>Rate:", X2005) )
#if(label=="party"){names(partycolor) <- unique(county_majority_alphabet$party)}
pal <- partycolor
leaflet(data = counties_shapes) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(candidate),
fillOpacity = 0.8,
color = "black",
weight = 1,
popup=~paste(name, "<br>Rate:", X2005) )
View(county_pres)
#if(label=="party"){names(partycolor) <- unique(county_majority_alphabet$party)}
pal <- colorFactor(domain=c("blue2", "red1", "yellow"), palette=c("democrat","republican","other"), ordered=TRUE)
leaflet(data = counties_shapes) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(candidate),
fillOpacity = 0.8,
color = "black",
weight = 1,
popup=~paste(name, "<br>Rate:", X2005) )
leaflet(data = counties_shapes) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal(candidate),
fillOpacity = 0.8,
color = "black",
weight = 1,
popup=~paste(name) )
View(counties_shapes)
counties_shapes <- geojson_read("https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json",what="sp")
county_pres <- USevolve:::county_pres
counties_shapes <- geojson_read("https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json",what="sp")
counties_shapes <- geojson_read("https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json",what="sp")
View(counties_shapes)
slotNames(counties_shapes)
counties_shapes@data$rn <- row.names(counties_shapes)
View(counties_shapes)
temp.counties <- data.table(counties_shapes@data)
temp.counties$name <- tolower(temp.counties$name)
View(temp.counties)
counties_shapes <- geojson_read("https://raw.githubusercontent.com/jgoodall/us-maps/master/geojson/county.geo.json",what="sp")
county_pres <- USevolve:::county_pres
slotNames(counties_shapes)
counties_shapes@data$rn <- row.names(counties_shapes)
temp.counties <- data.table(counties_shapes@data)
View(temp.counties)
county_election_years <- c(2000, 2004, 2008, 2012, 2016)
county_pres <- na.omit(county_pres)
county_pres$party[county_pres$party != "democrat" & county_pres$party != "republican"] <- "other"
county_pres$candidate[county_pres$party != "democrat" & county_pres$party != "republican"] <- "other"
county_pres %>%
rename(name=region) -> county_pres
out.counties <- merge(temp.counties, county_pres , by="name", all.x=TRUE)
View(temp.counties)
